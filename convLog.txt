epad conversion log

current epad runs in Python2
{open, save, save as, <edit>, new},  use buttons

------------------------------------------------------------------2to3
rashkin@rrLaptop:~/BLPython/epad$ 2to3 -w epad
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: Refactored epad
--- epad	(original)
+++ epad	(refactored)
@@ -16,7 +16,7 @@

			...


RefactoringTool: Files that were modified:
RefactoringTool: epad

rashkin@rrLaptop:~/BLPython/epad$ 2to3 -w -d epad
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: No files need to be modified.
-------------------------------------------------run test
rashkin@rrLaptop:~/BLPython/epad$ python3 epad
Segmentation fault (core dumped) [not repeatable]
-------------------------------------------------pylint3
Next: add docstrings; check for long lines; 
note: some of the long lines broke up lambdas...
         in fact, had to correct one of those to satisfy pylint
Corrected indentation and spaces and line-too-long pylint errors
Re-wrote a loop at 1415 to make it easier to shorten the lines
        if settings is not None:
            #for setting, value in list(settings.items()) if isinstance(settings, Mapping) else settings:
            if isinstance(settings, Mapping):
                settngs2 =l ist(settings.items())
            else:
                settngs2 = settings
            for setting, value in settngs2:
                self.__safe_set(setting, value)
        for setting, value in list(kwargs.items()):
            self.__safe_set(setting, value)
        self.write()
disable=too-many-lines
changed all instances of errorPopup to error_popup
moved import statements up before any assignments
took out double import - urllib.request
errorMsg >> error_msg; subsequent indentation
variable, tb >> _tb
variable, dialogLabel >> dialog_lbl; subsequent indentation
variable, closeMenu >> close_menu
commented out "global close_menu
function, resetCloseMenuCount >> reset_closemenu_count
attribute, confirmPopup >> cnfrm_popup; some indentation
attribute, mainWindow >> main_wndw; indentation
attribute, mainBox >> main_box; indentation
attribute, mainTb >> main_tb
attribute, findBox >> find_box
attribute, findVisible >> find_vsbl
attribute, fileBox >> file_box
attribute, fileLabel >> file_lbl --and save!!
attribute, lastDir >> last_dir
attribute, fileSelector >> file_slctr; indentation
variable, notifyBox >> notify_box; indentation
variable, notifyLabel >> notify_lbl; indentation
method, tabChanged >> tab_chngd
method, addFile >> add_file
method, baseFile >> base_file
method, closeFile >> close_file
method, showFile >> show_file  [??unused??]
method, newFile >> new_file
method, openFile >> open_file
method, fileSelCancelPressed >> fileselcncl_pressed
method, showFind >> show_find
method, hideFind >> hide_find
method, saveAs >> save_as
method, saveFile >> save_file
method fileSelected >> file_slctd
method, updateLastDir >> upd_lastdir
method, showAbout >> shw_about
method, closeApp >> close_app
method, closeChecks >> close_chks
method, closePopup >> close_popup
method, unsavedWorkPopup >> unsvdwrk_popup
method, eventsCb >> evnts_cb
argument, filePath >> file_path
variable, entryBox >> entry_box
variable, tabName >> tab_name
argument ignoreSave >> ignore_save
    def fileselcncl_pressed(self): >> removed "fs" argument
argument, fs >> _fs
constant, ourFiles >> OUR_FILES
class, ePadConf >> EpadConf
replaced if ... with var=bool
and then removed commented if block
grouped urllib imports
removed duplicate "show_hidden" member of "default" map in epadConf()
argument, it >> _it
method optionsNew >> options_new
removed unused argument, it, in selectAllPress()
method, selectAllPress >> slctall_press
method, cutPress >> cut_press
method, pastePress >> paste_press

method, itemClicked >> item_clicked
method, copyPress >> copy_press
method, reDoPress >> redo_press
method, unDoPress >> undo_press
removed unused argument, it, from copy_press, redo_press, undo_press
removed unused import: from efl.elementary.notify import Notify
removed unused import: from efl.elementary.notify import ELM_NOTIFY_ALIGN_FILL
removed unused import: from efl.elementary.flip import ELM_FLIP_INTERACTION_ROTATE
removed unused import: from efl.elementary.naviframe import Naviframe
removed unused import: from efl.elementary.layout import Layout
made item_clicked from method>>function -- removed self
>>> then undid above since it resulted in wrong number of arguments to efl/evas/....
argument, it >> _it
more argument, it >> _it
removed unused argument it from shw_about()
changed class ePadToolbar >> EpadToolbar
method, optionsToggle >> optns_toggle
argument, ck >> _ck
method, caseUpdate >> case_updt
made if ... : return into if ... : <linefeed> <indent> return
to fix:  fileselcncl_pressed() takes 1 positional argument but 2 were given
    	>>>added argument obj.
method, findAll >> find_all
method, lastFind >> last_find
changed, if self.currentFind == None  to if (self.currentFind is None)
len() used to determine if list is empty, if len(locations: >> if locations:  in find_pressed
method, findPressed >> find_pressed
bare exception, except: >> except SystemError:
variable, curPos >> cur_pos
variable, ourRe >> our_re
method, replacePressed >> repl_pressed
variable, closeButton >> close_btn
variable, replaceButton >> repl_btn
variable, findButton >> find_btn
variable, buttonBox >> btn_box
variable, replaceBox >> repl_box
variable, frameBox >> frame_box
len() used to determine if list is empty, if len(locations): >> if locations:  in repl_pressed
attribute, caseCheck >> case_chk
attribute, replaceEntry >> repl_entry
attribute, findEntry >> find_entry
attribute, lastSearch >> last_srch
attribute, currentFind >> curr_find
class, ePadFindBox >> EpadFindbox
len() used to determine if list is empty, if len(tmp_text): >> if tmp_text:  in doSelected
unnecessary "pass" statement in doSelected; removed
method, doSelected >> do_slctd
variable, tb >> _tb in fileExists
method, fileExists >> file_exists
one more tb >> _tb in file_exists
a couple of indentation cleanups
removed unused argument, tabbs, in tab_chngd
removed unused argument, tabbs, in bse_file
removed unused argument, tabbs, in close_file
argument, onStartup >> on_srtup
variable, IsSave >> is_save
variable, allSaved >> all_saved
argument, bt >> _bt
variable tb >> _tb in unsvdwrk_popup
variable ourFile >> our_file
len() used to determine empty sequence; if not len(self.tabbs.tabs) >> if not self.tabbs.tabs
method, confirmSave >> cnfrm_save
argument, ourCallback >> our_cb
method, textEdited >> txt_editd
added "unused" arg, "_it" to cut_press and paste_press
[[removed unused argument, it, from cut_press and paste_press]]<<undonw
2x "bare-except", changed "Except:" to "Except KeyError" in SetDirty()
method setDirty >> set_dirty
method curChanged >> cur_chngd
removed "pointless string":
            '''for i in range(self.totalLines+1, self.currentLinesShown+1):
                ll = self.lineList
                ll.cursor_end_set()
                ll.cursor_prev()
                ll.cursor_selection_begin()
                ll.cursor_line_begin_set()
                ll.cursor_prev()
                ll.cursor_selection_end()
                ll.selection_cut()'''
 from checkLineNumbers
method checkLineNumbers >> chk_linenums
			[that's what I get for going backwards]
argument, en >> _en
class, ePadEntry >> EpadEntry
attribute, lineList >> line_lst
attribute, currentLinesShown >> cur_lines_shwn
attribute, lineNums >> line_nums
attribute, mainEn >> main_en
attribute, totalLines >> total_lines
attribute, isNewFile >> is_nwfile
attribute, isSaved >> is_saved
attribute, doArchive >> do_archive
attribute, doSpot >> do_spot
method, takeSnapShot >> take_snapshot
variable, entryGet >> entry_get
Line 67; unused variable, i: I think it's best to leave it for iteration.
method, saveSnapShot >> save_snapshot
method, unDo >> un_do
method, reDo >> re_do
(unused) argument, bt >> _bt
--disabled "unused-argument" errors at line 189.  See unusedArg.txt for list. These are all needed because efl.extentions calls them with those arguments.
removed unused variable 'msg' from "except (RuntimeWarning, RuntimeError) as msg:" in open_file()
--disabled "no-name-in-module" at line 21. The statement:
from efl.evas import EVAS_HINT_EXPAND, EVAS_HINT_FILL,\
                     EVAS_CALLBACK_KEY_UP, EVAS_EVENT_FLAG_ON_HOLD
is absolutely necessary to even execute.
--disabled "redefined-outer-name" at line 139. Not sure what's going on there but I think it's above my pay grade.
--disabled "too-many-instance-attributes, too-many-statements, too-many-public-methods" at line 195
--disabled "no-self-use, no-member, c-extension-no-member" at line 312. 
	Getting rid of "self" breaks the execution
	Even though it says "no member" everything is running so I don't know how to fix it
--disabled "no-else-return" at line 419.
	it doesn't seem to me that the "else" is really un-needed
--disabled "too-many-branches" at line 511
--disabled "dangerout-default-value" at line 544. I'm not convinced an empty list is a dangerous default.
--disabled "unused-variable" at line 678
--disabled "attribute-defined-outside-init" at line 801
--disabled "no-self-use" at line 1073
--disabled "no-self-use" at line 1248
--disabled "attribute-defined-outside-init" at line 1360
--disabled "no-member" at line 1418

------------------------------------------------------------------yapf
 -- no yapf errors

------------------------------------------------------------------flake8
epad:2:1: E265 block comment should start with '# '. 
various "line too long"s
		and it may be screwing around with PYLINT!!
   and space around operators
   and space after #
Calling it on FLAKE8 with the following errors remaining:
epad:2:1: E265 block comment should start with '# '
   This is the "#!/usr/bin/python" line and I don't want to mess with that.
epad:1097:17: E122 continuation line missing indentation or outdented
   I can't get this to anything acceptable to FLAKE8
