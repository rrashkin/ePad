epad conversion log

current epad runs in Python2
{open, save, save as, <edit>, new}

------------------------------------------------------------------2to3
rashkin@rrLaptop:~/BLPython/epad$ 2to3 -w epad
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: Refactored epad
--- epad	(original)
+++ epad	(refactored)
@@ -16,7 +16,7 @@
 #    You should have received a copy of the GNU General Public License
 #    along with this program.  If not, see <http://www.gnu.org/licenses/>.

-from __future__ import print_function  # May as well bite the bullet
+  # May as well bite the bullet

 __author__ = "Jeff Hoogland"
 __contributors__ = ["Jeff Hoogland", "Robert Wiley", "Kai Huuhko", "Scimmia22"]
@@ -76,7 +76,7 @@
 import errno
 import sys
 import os
-import urllib
+import urllib.request, urllib.parse, urllib.error
 import io
 import json
 from collections import Mapping
@@ -521,7 +521,7 @@
             for ourFile in start[0]:
                 if ourFile[:7] == "file://":
                     try:
-                        ourFile = urllib.url2pathname(ourFile[7:])
+                        ourFile = urllib.request.url2pathname(ourFile[7:])
                     except AttributeError:
                         # Python3
                         ourFile = urllib.request.url2pathname(ourFile[7:])
@@ -1342,9 +1342,9 @@
                 config.update({'font': 'Mono', 'font_size': 24})
         """
         if settings is not None:
-            for setting, value in settings.items() if isinstance(settings, Mapping) else settings:
+            for setting, value in list(settings.items()) if isinstance(settings, Mapping) else settings:
                 self.__safe_set(setting, value)
-        for setting, value in kwargs.items():
+        for setting, value in list(kwargs.items()):
             self.__safe_set(setting, value)
         self.write()

RefactoringTool: Files that were modified:
RefactoringTool: epad

rashkin@rrLaptop:~/BLPython/epad$ 2to3 -w -d epad
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: No files need to be modified.
-------------------------------------------------run test
rashkin@rrLaptop:~/BLPython/epad$ python3 epad
Segmentation fault (core dumped) [not repeatable]
-------------------------------------------------pylint3
Next: add docstrings; check for long lines; 
note: some of the long lines broke up lambdas...
         in fact, had to correct one of those to satisfy pylint
Corrected indentation and spaces and line-too-long pylint errors
Re-wrote a loop at 1415 to make it easier to shorten the lines
        if settings is not None:
            #for setting, value in list(settings.items()) if isinstance(settings, Mapping) else settings:
            if isinstance(settings, Mapping):
                settngs2 =l ist(settings.items())
            else:
                settngs2 = settings
            for setting, value in settngs2:
                self.__safe_set(setting, value)
        for setting, value in list(kwargs.items()):
            self.__safe_set(setting, value)
        self.write()
disable=too-many-lines
changed all instances of errorPopup to error_popup
moved import statements up before any assignments
took out double import - urllib.request
errorMsg >> error_msg; subsequent indentation
variable, tb >> _tb
variable, dialogLabel >> dialog_lbl; subsequent indentation
variable, closeMenu >> close_menu
commented out "global close_menu
function, resetCloseMenuCount >> reset_closemenu_count
attribute, confirmPopup >> cnfrm_popup; some indentation
attribute, mainWindow >> main_wndw; indentation
attribute, mainBox >> main_box; indentation
attribute, mainTb >> main_tb
attribute, findBox >> find_box
attribute, findVisible >> find_vsbl
attribute, fileBox >> file_box
attribute, fileLabel >> file_lbl --and save!!
attribute, lastDir >> last_dir
attribute, fileSelector >> file_slctr; indentation
variable, notifyBox >> notify_box; indentation
variable, notifyLabel >> notify_lbl; indentation
method, tabChanged >> tab_chngd
method, addFile >> add_file
method, baseFile >> base_file
method, closeFile >> close_file
method, showFile >> show_file  [??unused??]
method, newFile >> new_file
method, openFile >> open_file
method, fileSelCancelPressed >> fileselcncl_pressed
method, showFind >> show_find
method, hideFind >> hide_find
method, saveAs >> save_as
method, saveFile >> save_file
method fileSelected >> file_slctd
method, updateLastDir >> upd_lastdir
method, showAbout >> shw_about
method, closeApp >> close_app
method, closeChecks >> close_chks
method, closePopup >> close_popup
method, unsavedWorkPopup >> unsvdwrk_popup
method, eventsCb >> evnts_cb
argument, filePath >> file_path
variable, entryBox >> entry_box
variable, tabName >> tab_name
argument ignoreSave >> ignore_save
    def fileselcncl_pressed(self): >> removed "fs" argument
argument, fs >> _fs
constant, ourFiles >> OUR_FILES
class, ePadConf >> EpadConf
replaced if ... with var=bool
and then removed commented if block
grouped urllib imports
removed duplicate "show_hidden" member of "default" map in epadConf()
argument, it >> _it
method optionsNew >> options_new
removed unused argument, it, in selectAllPress()
method, selectAllPress >> slctall_press
method, cutPress >> cut_press
method, pastePress >> paste_press
removed unused argument, it, from cut_press and paste_press
method, itemClicked >> item_clicked
method, copyPress >> copy_press
method, reDoPress >> redo_press
method, unDoPress >> undo_press
removed unused argument, it, from copy_press, redo_press, undo_press
removed unused import: from efl.elementary.notify import Notify
removed unused import: from efl.elementary.notify import ELM_NOTIFY_ALIGN_FILL
removed unused import: from efl.elementary.flip import ELM_FLIP_INTERACTION_ROTATE
removed unused import: from efl.elementary.naviframe import Naviframe
removed unused import: from efl.elementary.layout import Layout
made item_clicked from method>>function -- removed self
>>> then undid above since it resulted in wrong number of arguments to efl/evas/....
argument, it >> _it
more argument, it >> _it
removed unused argument it from shw_about()
changed class ePadToolbar >> EpadToolbar
method, optionsToggle >> optns_toggle
argument, ck >> _ck
method, caseUpdate >> case_updt
made if ... : return into if ... : <linefeed> <indent> return
to fix:  fileselcncl_pressed() takes 1 positional argument but 2 were given
    	>>>added argument obj.
method, findAll >> find_all
method, lastFind >> last_find
